html(lang='en')
  head
    meta(http-equiv='Content-Type', content='text/html; charset=utf-8')
    title editor
    script(src='https://d3js.org/d3.v5.min.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ajv/5.0.0/ajv.min.js')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js')
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/jQuery-slimScroll/1.3.8/jquery.slimscroll.js')

    script(src='/javascripts/editor.js')
    script(src='/javascripts/editor_svg.js')
    script(src='/javascripts/editor_svgoptionspanel.js')
    script(src='/javascripts/topologySchema.js')
    link(rel='stylesheet', href='/stylesheets/editor.css')
    link(rel='stylesheet', href='/stylesheets/editor_svg.css')

  body(onload='SVGGRAPH=SVGGRAPH();'+((data)?'loadfile()':''))
    .left
      .top
        button#help.btn.btn-info(type='button' data-toggle='modal' data-target='#helpModal') help
        a(href='/dashboard') Dashboard
        br
        a(href='/organizer') Organizer
        br
        p(contenteditable='true') LOL
        br
        .precaption fileName
        textarea#fileName(contenteditable='true' maxlength='25')= fileName || 'untitled'
        br
        br
        //- button(type='button' onclick='randomgraph()') big
        // I really don't know how to label these
        // also these bootstrap buttons look kinda out of place
        br
        #withDropdown
          button.btn.btn-default(type='button' onclick='listAttachments()' title='loads topology into textarea and svg' data-toggle='dropdown') load topology 
            span.caret
          ul.dropdown-menu(role='menu')
        .btn-group.btn-group-sm
          button.btn.btn-default#savetextareabutton(type='button' title='saves topology from textarea') save from textarea
          button.btn.btn-default#savesvgbutton(type='button' title='saves topology from svg') save from graph
        span#flashmessage(style='display: none;') don't panic
        button.btn.btn-sm.btn-default#createslicebutton(type='button') create slice (please save first)
        input(type='file')
      .bottom
        button.btn.btn-sm.btn-default(type='button' onclick='SVGGRAPH.svg_clear()') clear textarea
        .btn-group.btn-group-sm
          button.btn.btn-default(type='button' onclick='SVGGRAPH.svg_import();') textarea to graph
          button.btn.btn-default#exportbutton(type='button') graph to textarea
        textarea#jsontextarea(name='jsontextarea')
    .right
      #svgfocus(tabindex='0' style='display:inline-block')
        svg#editor(width='100%' height='100%' style='border: 1px solid black;')

    // MODAL
    #helpModal.modal.fade(role='dialog')
      .modal-dialog
        .modal-content
          .modal-header
            button.close(type='button' data-dismiss='modal') &times;
            h3.modal-title Help
          .modal-body
            h4 <strong>sidebar</strong>
            ul
              li <strong>load:</strong> loads a file from the list of your attachments
              li <strong>save:</strong> saves the JSON in the textarea as an attachment
              li <strong>choose file:</strong> directly upload a file to the textarea
              li <strong>import:</strong> imports the JSON in the textarea to the graph
              li <strong>clear:</strong> puts the JSON of an empty graph into the textarea
              li <strong>export:</strong> outputs the JSON of the graph into the textarea
              li <strong>textarea:</strong> the middleman
            h3 <strong>SVG graph</strong>
            p hover over icons to show a tooltip
            h4 <strong>toolbar</strong>
            ul
              li <strong>play/pause:</strong> plays or pauses the <em>force</em> simulation
                ul
                  li forces are: link, manybodies, center
                  li in pause mode nodes will not be moved around by the forces
              li <strong>select/edit:</strong> toggles between edit modes
                ul
                  li must be in edit mode in order to delete
                  li <strong>shapes:</strong> determines what shape will be used to create the next node
            h4 <strong>usage</strong>
            ul
              li <strong>in general</strong>
                ul
                  li <u>click and drag a node</u> to move it around
                  li <u>double click a node</u> to open an options panel to edit its properties
                  li <u>click a node</u> to select it
                  li <u>click a link</u> to select it
                  li <u>press escape</u> to deselect everything
                  li <u>drag the background</u> to pan
                  li <u>scroll the mousewheel</u> to zoom
              li <strong>in edit mode</strong>
                ul
                  li <u>double click the background</u> to create a new node
                  li <u>shift-click a node</u> to begin creating a link
                  li <u>shift-click another node</u> to finish creating the link
                  li <u>press delete</u> to delete all selected nodes/links
              li <strong>in non-edit mode</strong>
            h4 <strong>highlights/borders</strong>
            ul
              li <strong>orange:</strong> selected
              li <strong>dashed orange:</strong> selected to create link
              li <strong>light sky blue:</strong> has options panel open (is not selected)
            h4 <strong>properties</strong>
            ul
              li names must be <em>unique</em>
            h4 <strong>browser compatability</strong>
            ul
              li <strong>chrome v59.0.3071:</strong> developed using chrome
              li <strong>firefox v54.0:</strong> ok
              li <strong>edge v40.15063.0.0:</strong> problems with form rendering when zooming

          .modal-footer
            button.btn.btn-default(type='button' data-dismiss='modal') Close

//- script.
  function randomgraph() {
    var n = 1000,
      rnodes = d3.range(n).map(function (d) {
        return { name: d.toString(), shape: "circle", color: "black"};
      }),
      rlinks = d3.range(n).map(function (d) {
        return { source: d.toString(), target: ((d + 8) % n).toString() };
        //return { source: d.toString(), target: (Math.floor((Math.random() * n))).toString() };
        //return { source: d.toString(), target: "1" };
      }),
      obj = JSON.stringify({ nodes: rnodes, links: rlinks });
    d3.select("#jsontextarea").property("value", obj);
  }

if data
  script.
    function loadfile() {
      var data = !{JSON.stringify(data).replace(/<\//g, "<\\/")};
      d3.select("#jsontextarea").property("value", data);
      SVGGRAPH.svg_import();
    }


